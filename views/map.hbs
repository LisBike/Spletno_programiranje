<div class="row">
    <h1>MAP</h1>
    <style>
        #map {
            height: 600px;
            width: 100%;
        }
    </style>
    <div id="map">
    </div>
    <ul class="d-none">
        {{#each locations}}
            <li data-lat="{{this.latitude}}" data-lng="{{this.longitude}}">
                {{this.name}} |
                Capacity: {{this.capacity}} |
                Bikes: {{this.bikes}} |
                Stands: {{this.stands}} |
            </li>
        {{/each}}
    </ul>


    <div class="col-12 mt-4 text-center">
        <button id="closestRoute" type="button" class="btn btn-secondary">Find closest Bike Station</button>
    </div>


    <script>

        let userLatLng = null;

        function findClosestLocation(userLocation, targetLocations) {
            let closestLocation = null;
            let closestDistance = Number.POSITIVE_INFINITY;

            for (const targetLocation of targetLocations) {
                const distance = calculateDistance(userLocation, targetLocation);
                if (distance < closestDistance) {
                    closestDistance = distance;
                    closestLocation = targetLocation;
                }
            }

            return closestLocation;
        }

        function calculateDistance(location1, location2) {
            const lat1 = location1.lat;
            const lon1 = location1.lng;
            const lat2 = location2.lat;
            const lon2 = location2.lng;

            const earthRadius = 6371; // Radius of the Earth in kilometers

            const dLat = (lat2 - lat1)*(Math.PI / 180);
            const dLon = (lon2 - lon1)*(Math.PI / 180);

            const a =
                    Math.sin(dLat / 2) * Math.sin(dLat / 2) +
                    Math.cos(lat1*(Math.PI / 180)) * Math.cos(lat2*(Math.PI / 180)) *
                    Math.sin(dLon / 2) * Math.sin(dLon / 2);

            const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
            return earthRadius * c;
        }

        async function initMap() {
            // Create a new map instance
            var map = new google.maps.Map(document.getElementById("map"), {
                center: {lat: 46.5557, lng: 15.6400}, // Set the initial center coordinates
                zoom: 15, // Set the initial zoom level
            });

            var markers = [];

            // Get the list items
            var listItems = document.querySelectorAll('li[data-lat][data-lng]');

            let openInfoWindow = null;

            await listItems.forEach(function (listItem) {
                var lat = parseFloat(listItem.getAttribute('data-lat'));
                var lng = parseFloat(listItem.getAttribute('data-lng'));

                var marker = new google.maps.Marker({
                    position: {lat: lat, lng: lng},
                    title: listItem.innerText,
                    map: map,
                    icon: '/images/bicycle.png',
                    lat: lat,
                    lng: lng
                });

                const infoWindow = new google.maps.InfoWindow({
                    content: marker.title
                });

                marker.addListener('click', () => {

                    if (openInfoWindow) {
                        openInfoWindow.close();
                    }

                    infoWindow.open(map, marker);

                    openInfoWindow = infoWindow;

                });

                markers.push(marker);
            });

            const button = document.getElementById('closestRoute');
            button.addEventListener('click', () => {

                if (navigator.geolocation) {
                    navigator.geolocation.getCurrentPosition(
                            async (position) => {
                                userLatLng = {
                                    lat: position.coords.latitude,
                                    lng: position.coords.longitude
                                };

                                // Set map center to user's location
                                // map.setCenter(userLatLng);

                                // Create a marker at user's location
                                const marker = new google.maps.Marker({
                                    position: userLatLng,
                                    title: 'Your Location',
                                    map: map
                                });

                                const directionsService = new google.maps.DirectionsService();
                                const directionsRenderer = new google.maps.DirectionsRenderer({
                                    map: map
                                });

                                const origin = userLatLng;

                                let closest = await findClosestLocation(origin, markers)
                                const request = {
                                    origin: origin,
                                    destination: {lat: closest.lat, lng: closest.lng},
                                    travelMode: google.maps.TravelMode.WALKING
                                };

                                directionsService.route(request, (result, status) => {
                                    if (status === google.maps.DirectionsStatus.OK) {
                                        directionsRenderer.setDirections(result);
                                    } else {
                                        console.error('Directions request failed. Status:', status);
                                    }
                                });

                            },
                            (error) => {
                                console.error('Error retrieving location:', error);
                            }
                    );
                } else {
                    console.error('Geolocation is not supported by this browser.');
                }


            });


        }

    </script>

    <script src="https://maps.googleapis.com/maps/api/js?callback=initMap&key={{apiKey}}" async defer></script>


</div>
